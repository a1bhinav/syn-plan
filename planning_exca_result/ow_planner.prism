// autonomy-excavate
// RASPBERRY-SI Planning model prototype for Ocean Worlds Autonomy Testbed
// Javier Camara, Univerity of York
// javier.camaramoreno@york.ac.uk

mdp


 // Number of excavation locations
 // Number of dump locations

// Parameters
const curLoc=15; // Current location of arm when planner is called (here we have a hardcoded value, but this will be provided to the planner)

// Special Locations
const locOrig=0;
const locNull=14+100; // Only auxiliary constants to define the range of variable loc

// Excavation Locations
const xloc1=1;
const xloc2=2;
const xloc3=3;
const xloc4=4;
const xloc5=5;
const xloc6=6;
const xloc7=7;
const xloc8=8;

// Dump Locations
const dloc1=9;
const dloc2=10;
const dloc3=11;
const dloc4=12;
const dloc5=13;
const dloc6=14;


// Possible states of the mission (to keep track of progress)
const START=0;
const DONE_EXCAVATING=1;
const DONE_DUMPING=2;
const FAILED=100;

formula tried_all_xloc =  tried_xloc1 &  tried_xloc2 &  tried_xloc3 &  tried_xloc4 &  tried_xloc5 &  tried_xloc6 &  tried_xloc7 &  tried_xloc8 &  true; // Have we tried all excavation locations?
//const int MAX_TRIED; // Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)

// Module that is in charge of selecting an excavation location
// It tries one location first, and if it does not succeed, it goes to the next one.
// If all locations have been tried and state is still START (unsuccessful excavation), it fails
module autonomy
	s:[START..FAILED] init START; // State of mission
	loc:[locOrig..locNull] init curLoc;
	tried:[0..MAX_TRIED] init 0; // Keeps track of excavation attempts

	
	tried_xloc1: bool init false;
	succ_xloc1: bool init false;
	tried_xloc2: bool init false;
	succ_xloc2: bool init false;
	tried_xloc3: bool init false;
	succ_xloc3: bool init false;
	tried_xloc4: bool init false;
	succ_xloc4: bool init false;
	tried_xloc5: bool init false;
	succ_xloc5: bool init false;
	tried_xloc6: bool init false;
	succ_xloc6: bool init false;
	tried_xloc7: bool init false;
	succ_xloc7: bool init false;
	tried_xloc8: bool init false;
	succ_xloc8: bool init false;

	// Excavation behavior
	// In the following commands, we have:
	// Command 1:
	// * A guard that checks: (1) that we are at the START of the mission
	// 			  (2) that we have not tried to excavate location A
	//			  (3) that the maximum number of excavation attempts has not been reached
	// * An update with probability ex_locA (excavatability of excavation location A) that:
	//			  (1) updates the variable saying that we have tried location A (not needed but left for clarity)
	// 			  (2) updates the variable that keeps track of excavation attempts
	//			  (3) updates the arm location variable to location A
	//            (4) updates the variable for excavation success in the current location to true	
	// * Another update with probability 1-ex_locA that:
	//			  (1) updates the variable saying that we have tried location A
	//			  (2) updates the arm location variable to location A (even if we have not succeeded excavating)
	// 			  (3) updates the variable that keeps track of excavation attempts
	// Command 2:
	// * A guard that checks: (1) that there is success in the current excavation location
	// * An update that: (1) sets the excavation success back to false
   	//			         (2) updates the state to successful excavation (DONE_EXCAVATING)

	
	[try_xloc1] (s=START) & (!tried_xloc1) & (tried<MAX_TRIED) -> ex_loc1: (s'=DONE_EXCAVATING) & (tried_xloc1'=true) &  (tried'=tried+1)  & (loc'=xloc1) & (succ_xloc1'=true) 
				  	       + (1-ex_loc1): (tried_xloc1'=true) &  (tried'=tried+1) & (loc'=xloc1);
	[select_xloc1] (succ_xloc1) -> (succ_xloc1'=false) & (s'=DONE_EXCAVATING);
	[try_xloc2] (s=START) & (!tried_xloc2) & (tried<MAX_TRIED) -> ex_loc2: (s'=DONE_EXCAVATING) & (tried_xloc2'=true) &  (tried'=tried+1)  & (loc'=xloc2) & (succ_xloc2'=true) 
				  	       + (1-ex_loc2): (tried_xloc2'=true) &  (tried'=tried+1) & (loc'=xloc2);
	[select_xloc2] (succ_xloc2) -> (succ_xloc2'=false) & (s'=DONE_EXCAVATING);
	[try_xloc3] (s=START) & (!tried_xloc3) & (tried<MAX_TRIED) -> ex_loc3: (s'=DONE_EXCAVATING) & (tried_xloc3'=true) &  (tried'=tried+1)  & (loc'=xloc3) & (succ_xloc3'=true) 
				  	       + (1-ex_loc3): (tried_xloc3'=true) &  (tried'=tried+1) & (loc'=xloc3);
	[select_xloc3] (succ_xloc3) -> (succ_xloc3'=false) & (s'=DONE_EXCAVATING);
	[try_xloc4] (s=START) & (!tried_xloc4) & (tried<MAX_TRIED) -> ex_loc4: (s'=DONE_EXCAVATING) & (tried_xloc4'=true) &  (tried'=tried+1)  & (loc'=xloc4) & (succ_xloc4'=true) 
				  	       + (1-ex_loc4): (tried_xloc4'=true) &  (tried'=tried+1) & (loc'=xloc4);
	[select_xloc4] (succ_xloc4) -> (succ_xloc4'=false) & (s'=DONE_EXCAVATING);
	[try_xloc5] (s=START) & (!tried_xloc5) & (tried<MAX_TRIED) -> ex_loc5: (s'=DONE_EXCAVATING) & (tried_xloc5'=true) &  (tried'=tried+1)  & (loc'=xloc5) & (succ_xloc5'=true) 
				  	       + (1-ex_loc5): (tried_xloc5'=true) &  (tried'=tried+1) & (loc'=xloc5);
	[select_xloc5] (succ_xloc5) -> (succ_xloc5'=false) & (s'=DONE_EXCAVATING);
	[try_xloc6] (s=START) & (!tried_xloc6) & (tried<MAX_TRIED) -> ex_loc6: (s'=DONE_EXCAVATING) & (tried_xloc6'=true) &  (tried'=tried+1)  & (loc'=xloc6) & (succ_xloc6'=true) 
				  	       + (1-ex_loc6): (tried_xloc6'=true) &  (tried'=tried+1) & (loc'=xloc6);
	[select_xloc6] (succ_xloc6) -> (succ_xloc6'=false) & (s'=DONE_EXCAVATING);
	[try_xloc7] (s=START) & (!tried_xloc7) & (tried<MAX_TRIED) -> ex_loc7: (s'=DONE_EXCAVATING) & (tried_xloc7'=true) &  (tried'=tried+1)  & (loc'=xloc7) & (succ_xloc7'=true) 
				  	       + (1-ex_loc7): (tried_xloc7'=true) &  (tried'=tried+1) & (loc'=xloc7);
	[select_xloc7] (succ_xloc7) -> (succ_xloc7'=false) & (s'=DONE_EXCAVATING);
	[try_xloc8] (s=START) & (!tried_xloc8) & (tried<MAX_TRIED) -> ex_loc8: (s'=DONE_EXCAVATING) & (tried_xloc8'=true) &  (tried'=tried+1)  & (loc'=xloc8) & (succ_xloc8'=true) 
				  	       + (1-ex_loc8): (tried_xloc8'=true) &  (tried'=tried+1) & (loc'=xloc8);
	[select_xloc8] (succ_xloc8) -> (succ_xloc8'=false) & (s'=DONE_EXCAVATING);

	
	// If all excavation locations have been tried (or maximum number of excavation attempts has been reached) and state is not DONE_EXCAVATING, mission fails
	[] (s=START) & (tried_all_xloc | tried>= MAX_TRIED) -> (s'=FAILED); 

	// Dump behavior
	// These commands just update the state to DONE_DUMPING (no probability of failure), and update arm location

	[select_dloc1] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc1);
	[select_dloc2] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc2);
	[select_dloc3] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc3);
	[select_dloc4] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc4);
	[select_dloc5] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc5);
	[select_dloc6] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc6);


endmodule


// stopping condition label for PCTL formula checking
label "done" = (s=DONE_DUMPING);



// Script-generated rewards and constants start here


// Science value reward
// The estimated science value for the different excavation locations has to be provided by a different model
rewards "SV"
	[select_xloc8] true: 0.874229918689;
	[select_xloc3] true: 0.556436596269;
	[select_xloc2] true: 0.90641798229;
	[select_xloc1] true: 0.532202806023;
	[select_xloc7] true: 0.0597345629102;
	[select_xloc6] true: 0.816890505311;
	[select_xloc5] true: 0.118781650214;
	[select_xloc4] true: 0.275822304223;
endrewards

// Energy consumption cost
// The values for the energy costs have to be provided by a different model
// the reward structure below considers both the cost of excavation and moving to the arm to a location
// the cost of excavation is fixed, but the cost of movement from another location varies, depending on the
// original location of the arm (there is one line of the reward structure per alternative original location
// NOTE: cost of moving the arm A->B and B<-A are the same here, but these costs might be different due to different
// trajectories computed by lower-level control

rewards "EC"
	[select_xloc3] loc=xloc8 :0.107625675661;
	[select_xloc2] loc=xloc8 :0.161237092935;
	[select_xloc1] loc=xloc8 :0.0701401946186;
	[select_xloc7] loc=xloc8 :0.0268728488225;
	[select_xloc6] loc=xloc8 :0.0405103182377;
	[select_xloc5] loc=xloc8 :0.0270068788251;
	[select_xloc4] loc=xloc8 :0.0288492266694;
	[select_dloc6] loc=xloc8 :0.0288492266694;
	[select_dloc5] loc=xloc8 :0.0288492266694;
	[select_dloc4] loc=xloc8 :0.0288492266694;
	[select_dloc3] loc=xloc8 :0.0288492266694;
	[select_dloc2] loc=xloc8 :0.0288492266694;
	[select_dloc1] loc=xloc8 :0.0288492266694;
	[select_xloc8] loc=xloc3 :0.107625675661;
	[select_xloc2] loc=xloc3 :0.0540137576502;
	[select_xloc1] loc=xloc3 :0.0477134979549;
	[select_xloc7] loc=xloc3 :0.11222431139;
	[select_xloc6] loc=xloc3 :0.0671955571372;
	[select_xloc5] loc=xloc3 :0.0806633221146;
	[select_xloc4] loc=xloc3 :0.0990019238554;
	[select_dloc6] loc=xloc3 :0.0990019238554;
	[select_dloc5] loc=xloc3 :0.0990019238554;
	[select_dloc4] loc=xloc3 :0.0990019238554;
	[select_dloc3] loc=xloc3 :0.0990019238554;
	[select_dloc2] loc=xloc3 :0.0990019238554;
	[select_dloc1] loc=xloc3 :0.0990019238554;
	[select_xloc8] loc=xloc2 :0.161237092935;
	[select_xloc3] loc=xloc2 :0.0540137576502;
	[select_xloc1] loc=xloc2 :0.0961901602252;
	[select_xloc7] loc=xloc2 :0.1634611579;
	[select_xloc6] loc=xloc2 :0.120994983172;
	[select_xloc5] loc=xloc2 :0.134391114274;
	[select_xloc4] loc=xloc2 :0.149989259597;
	[select_dloc6] loc=xloc2 :0.149989259597;
	[select_dloc5] loc=xloc2 :0.149989259597;
	[select_dloc4] loc=xloc2 :0.149989259597;
	[select_dloc3] loc=xloc2 :0.149989259597;
	[select_dloc2] loc=xloc2 :0.149989259597;
	[select_dloc1] loc=xloc2 :0.149989259597;
	[select_xloc8] loc=xloc1 :0.0701401946186;
	[select_xloc3] loc=xloc1 :0.0477134979549;
	[select_xloc2] loc=xloc1 :0.0961901602252;
	[select_xloc7] loc=xloc1 :0.0675171970628;
	[select_xloc6] loc=xloc1 :0.0361537205131;
	[select_xloc5] loc=xloc1 :0.046331316476;
	[select_xloc4] loc=xloc1 :0.0540137576502;
	[select_dloc6] loc=xloc1 :0.0540137576502;
	[select_dloc5] loc=xloc1 :0.0540137576502;
	[select_dloc4] loc=xloc1 :0.0540137576502;
	[select_dloc3] loc=xloc1 :0.0540137576502;
	[select_dloc2] loc=xloc1 :0.0540137576502;
	[select_dloc1] loc=xloc1 :0.0540137576502;
	[select_xloc8] loc=xloc7 :0.0268728488225;
	[select_xloc3] loc=xloc7 :0.11222431139;
	[select_xloc2] loc=xloc7 :0.1634611579;
	[select_xloc1] loc=xloc7 :0.0675171970628;
	[select_xloc6] loc=xloc7 :0.0507925278826;
	[select_xloc5] loc=xloc7 :0.0399493618031;
	[select_xloc4] loc=xloc7 :0.0135034394126;
	[select_dloc6] loc=xloc7 :0.0135034394126;
	[select_dloc5] loc=xloc7 :0.0135034394126;
	[select_dloc4] loc=xloc7 :0.0135034394126;
	[select_dloc3] loc=xloc7 :0.0135034394126;
	[select_dloc2] loc=xloc7 :0.0135034394126;
	[select_dloc1] loc=xloc7 :0.0135034394126;
	[select_xloc8] loc=xloc6 :0.0405103182377;
	[select_xloc3] loc=xloc6 :0.0671955571372;
	[select_xloc2] loc=xloc6 :0.120994983172;
	[select_xloc1] loc=xloc6 :0.0361537205131;
	[select_xloc7] loc=xloc6 :0.0507925278826;
	[select_xloc5] loc=xloc6 :0.0135034394126;
	[select_xloc4] loc=xloc6 :0.0399493618031;
	[select_dloc6] loc=xloc6 :0.0399493618031;
	[select_dloc5] loc=xloc6 :0.0399493618031;
	[select_dloc4] loc=xloc6 :0.0399493618031;
	[select_dloc3] loc=xloc6 :0.0399493618031;
	[select_dloc2] loc=xloc6 :0.0399493618031;
	[select_dloc1] loc=xloc6 :0.0399493618031;
	[select_xloc8] loc=xloc5 :0.0270068788251;
	[select_xloc3] loc=xloc5 :0.0806633221146;
	[select_xloc2] loc=xloc5 :0.134391114274;
	[select_xloc1] loc=xloc5 :0.046331316476;
	[select_xloc7] loc=xloc5 :0.0399493618031;
	[select_xloc6] loc=xloc5 :0.0135034394126;
	[select_xloc4] loc=xloc5 :0.0312523259964;
	[select_dloc6] loc=xloc5 :0.0312523259964;
	[select_dloc5] loc=xloc5 :0.0312523259964;
	[select_dloc4] loc=xloc5 :0.0312523259964;
	[select_dloc3] loc=xloc5 :0.0312523259964;
	[select_dloc2] loc=xloc5 :0.0312523259964;
	[select_dloc1] loc=xloc5 :0.0312523259964;
	[select_xloc8] loc=xloc4 :0.0288492266694;
	[select_xloc3] loc=xloc4 :0.0990019238554;
	[select_xloc2] loc=xloc4 :0.149989259597;
	[select_xloc1] loc=xloc4 :0.0540137576502;
	[select_xloc7] loc=xloc4 :0.0135034394126;
	[select_xloc6] loc=xloc4 :0.0399493618031;
	[select_xloc5] loc=xloc4 :0.0312523259964;
	[select_dloc6] loc=xloc4 :0.0312523259964;
	[select_dloc5] loc=xloc4 :0.0312523259964;
	[select_dloc4] loc=xloc4 :0.0312523259964;
	[select_dloc3] loc=xloc4 :0.0312523259964;
	[select_dloc2] loc=xloc4 :0.0312523259964;
	[select_dloc1] loc=xloc4 :0.0312523259964;
endrewards

rewards "T"
	[select_xloc3] loc=xloc8 :0.678793894302;
	[select_xloc2] loc=xloc8 :1.01692048432;
	[select_xloc1] loc=xloc8 :0.442373397981;
	[select_xloc7] loc=xloc8 :0.169486747387;
	[select_xloc6] loc=xloc8 :0.255498109601;
	[select_xloc5] loc=xloc8 :0.170332073067;
	[select_xloc4] loc=xloc8 :0.181951739659;
	[select_dloc6] loc=xloc8 :0.181951739659;
	[select_dloc5] loc=xloc8 :0.181951739659;
	[select_dloc4] loc=xloc8 :0.181951739659;
	[select_dloc3] loc=xloc8 :0.181951739659;
	[select_dloc2] loc=xloc8 :0.181951739659;
	[select_dloc1] loc=xloc8 :0.181951739659;
	[select_xloc8] loc=xloc3 :0.678793894302;
	[select_xloc2] loc=xloc3 :0.340664146134;
	[select_xloc1] loc=xloc3 :0.300928480947;
	[select_xloc7] loc=xloc3 :0.707797436769;
	[select_xloc6] loc=xloc3 :0.42380160337;
	[select_xloc5] loc=xloc3 :0.508742641652;
	[select_xloc4] loc=xloc3 :0.624403991188;
	[select_dloc6] loc=xloc3 :0.624403991188;
	[select_dloc5] loc=xloc3 :0.624403991188;
	[select_dloc4] loc=xloc3 :0.624403991188;
	[select_dloc3] loc=xloc3 :0.624403991188;
	[select_dloc2] loc=xloc3 :0.624403991188;
	[select_dloc1] loc=xloc3 :0.624403991188;
	[select_xloc8] loc=xloc2 :1.01692048432;
	[select_xloc3] loc=xloc2 :0.340664146134;
	[select_xloc1] loc=xloc2 :0.606670230423;
	[select_xloc7] loc=xloc2 :1.03094763639;
	[select_xloc6] loc=xloc2 :0.763113962478;
	[select_xloc5] loc=xloc2 :0.847603206739;
	[select_xloc4] loc=xloc2 :0.945980529273;
	[select_dloc6] loc=xloc2 :0.945980529273;
	[select_dloc5] loc=xloc2 :0.945980529273;
	[select_dloc4] loc=xloc2 :0.945980529273;
	[select_dloc3] loc=xloc2 :0.945980529273;
	[select_dloc2] loc=xloc2 :0.945980529273;
	[select_dloc1] loc=xloc2 :0.945980529273;
	[select_xloc8] loc=xloc1 :0.442373397981;
	[select_xloc3] loc=xloc1 :0.300928480947;
	[select_xloc2] loc=xloc1 :0.606670230423;
	[select_xloc7] loc=xloc1 :0.425830182668;
	[select_xloc6] loc=xloc1 :0.228021098031;
	[select_xloc5] loc=xloc1 :0.292211078311;
	[select_xloc4] loc=xloc1 :0.340664146134;
	[select_dloc6] loc=xloc1 :0.340664146134;
	[select_dloc5] loc=xloc1 :0.340664146134;
	[select_dloc4] loc=xloc1 :0.340664146134;
	[select_dloc3] loc=xloc1 :0.340664146134;
	[select_dloc2] loc=xloc1 :0.340664146134;
	[select_dloc1] loc=xloc1 :0.340664146134;
	[select_xloc8] loc=xloc7 :0.169486747387;
	[select_xloc3] loc=xloc7 :0.707797436769;
	[select_xloc2] loc=xloc7 :1.03094763639;
	[select_xloc1] loc=xloc7 :0.425830182668;
	[select_xloc6] loc=xloc7 :0.320347887166;
	[select_xloc5] loc=xloc7 :0.251960163842;
	[select_xloc4] loc=xloc7 :0.0851660365336;
	[select_dloc6] loc=xloc7 :0.0851660365336;
	[select_dloc5] loc=xloc7 :0.0851660365336;
	[select_dloc4] loc=xloc7 :0.0851660365336;
	[select_dloc3] loc=xloc7 :0.0851660365336;
	[select_dloc2] loc=xloc7 :0.0851660365336;
	[select_dloc1] loc=xloc7 :0.0851660365336;
	[select_xloc8] loc=xloc6 :0.255498109601;
	[select_xloc3] loc=xloc6 :0.42380160337;
	[select_xloc2] loc=xloc6 :0.763113962478;
	[select_xloc1] loc=xloc6 :0.228021098031;
	[select_xloc7] loc=xloc6 :0.320347887166;
	[select_xloc5] loc=xloc6 :0.0851660365336;
	[select_xloc4] loc=xloc6 :0.251960163842;
	[select_dloc6] loc=xloc6 :0.251960163842;
	[select_dloc5] loc=xloc6 :0.251960163842;
	[select_dloc4] loc=xloc6 :0.251960163842;
	[select_dloc3] loc=xloc6 :0.251960163842;
	[select_dloc2] loc=xloc6 :0.251960163842;
	[select_dloc1] loc=xloc6 :0.251960163842;
	[select_xloc8] loc=xloc5 :0.170332073067;
	[select_xloc3] loc=xloc5 :0.508742641652;
	[select_xloc2] loc=xloc5 :0.847603206739;
	[select_xloc1] loc=xloc5 :0.292211078311;
	[select_xloc7] loc=xloc5 :0.251960163842;
	[select_xloc6] loc=xloc5 :0.0851660365336;
	[select_xloc4] loc=xloc5 :0.197108059381;
	[select_dloc6] loc=xloc5 :0.197108059381;
	[select_dloc5] loc=xloc5 :0.197108059381;
	[select_dloc4] loc=xloc5 :0.197108059381;
	[select_dloc3] loc=xloc5 :0.197108059381;
	[select_dloc2] loc=xloc5 :0.197108059381;
	[select_dloc1] loc=xloc5 :0.197108059381;
	[select_xloc8] loc=xloc4 :0.181951739659;
	[select_xloc3] loc=xloc4 :0.624403991188;
	[select_xloc2] loc=xloc4 :0.945980529273;
	[select_xloc1] loc=xloc4 :0.340664146134;
	[select_xloc7] loc=xloc4 :0.0851660365336;
	[select_xloc6] loc=xloc4 :0.251960163842;
	[select_xloc5] loc=xloc4 :0.197108059381;
	[select_dloc6] loc=xloc4 :0.197108059381;
	[select_dloc5] loc=xloc4 :0.197108059381;
	[select_dloc4] loc=xloc4 :0.197108059381;
	[select_dloc3] loc=xloc4 :0.197108059381;
	[select_dloc2] loc=xloc4 :0.197108059381;
	[select_dloc1] loc=xloc4 :0.197108059381;
endrewards

// Excavatability probabilities for excavation locations
const double ex_loc8=0.650308032524;
const double ex_loc3=0.777425361492;
const double ex_loc2=0.637432807084;
const double ex_loc1=0.787118877591;
const double ex_loc7=0.976106174836;
const double ex_loc6=0.673243797876;
const double ex_loc5=0.952487339914;
const double ex_loc4=0.889671078311;

// Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)
const int MAX_TRIED=1;
